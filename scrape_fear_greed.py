# -*- coding: utf-8 -*-
"""scrape_fear_greed.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JzK_m-tKBPGlHtRGtQgqSM9CmmI5bjYA
"""

import requests
from bs4 import BeautifulSoup
import pandas as pd
from datetime import datetime
import time

# Headers to mimic a browser request
headers = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36",
    "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8",
    "Accept-Language": "en-US,en;q=0.5",
    "Referer": "https://www.google.com/"
}

# Function to scrape Fear & Greed Index
def scrape_fear_greed(date):
    url = "https://alternative.me/crypto/fear-and-greed-index/"
    date_str = date.strftime("%m/%d/%Y")

    try:
        # Fetch the webpage
        response = requests.get(url, headers=headers, timeout=10)
        response.raise_for_status()

        # Parse the HTML
        soup = BeautifulSoup(response.text, "html.parser")

        # Find the index value using the correct selector
        index_elem = soup.select_one(".fng-value .fng-circle")
        if index_elem:
            index_value = int(index_elem.get_text(strip=True))
        else:
            print(f"No index value found for {date_str}. Saving page source for debugging.")
            with open("debug_page_source.html", "w", encoding="utf-8") as f:
                f.write(soup.prettify())
            return 50, "Neutral"

        # Determine sentiment based on index value
        if index_value <= 24:
            sentiment = "Extreme Fear"
        elif index_value <= 49:
            sentiment = "Fear"
        elif index_value <= 74:
            sentiment = "Neutral"
        elif index_value <= 89:
            sentiment = "Greed"
        else:
            sentiment = "Extreme Greed"

        print(f"Scraped Fear & Greed Index for {date_str}: {index_value} ({sentiment})")
        return index_value, sentiment

    except requests.RequestException as e:
        print(f"Error fetching data for {date_str}: {e}")
        return 50, "Neutral"
    except Exception as e:
        print(f"Error parsing data for {date_str}: {e}")
        return 50, "Neutral"

# Main function to scrape and save data
def main():
    # Use the current date
    current_date = datetime.now()
    date_str = current_date.strftime("%m/%d/%Y")

    # Scrape Fear & Greed Index
    print(f"Scraping Fear & Greed Index for {date_str}...")
    index_value, sentiment = scrape_fear_greed(current_date)

    # Prepare data for CSV
    data = [[date_str, index_value, sentiment]]

    # Create DataFrame and save to CSV
    df = pd.DataFrame(data, columns=["Date", "Index", "Sentiment"])
    df.to_csv("fear_greed.csv", index=False)
    print("Saved Fear & Greed Index to fear_greed.csv")

if __name__ == "__main__":
    main()